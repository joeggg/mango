// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: dota_gcmessages_common_m.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DOTA_GameMode int32

const (
	DOTA_GameMode_DOTA_GAMEMODE_NONE              DOTA_GameMode = 0
	DOTA_GameMode_DOTA_GAMEMODE_AP                DOTA_GameMode = 1
	DOTA_GameMode_DOTA_GAMEMODE_CM                DOTA_GameMode = 2
	DOTA_GameMode_DOTA_GAMEMODE_RD                DOTA_GameMode = 3
	DOTA_GameMode_DOTA_GAMEMODE_SD                DOTA_GameMode = 4
	DOTA_GameMode_DOTA_GAMEMODE_AR                DOTA_GameMode = 5
	DOTA_GameMode_DOTA_GAMEMODE_INTRO             DOTA_GameMode = 6
	DOTA_GameMode_DOTA_GAMEMODE_HW                DOTA_GameMode = 7
	DOTA_GameMode_DOTA_GAMEMODE_REVERSE_CM        DOTA_GameMode = 8
	DOTA_GameMode_DOTA_GAMEMODE_XMAS              DOTA_GameMode = 9
	DOTA_GameMode_DOTA_GAMEMODE_TUTORIAL          DOTA_GameMode = 10
	DOTA_GameMode_DOTA_GAMEMODE_MO                DOTA_GameMode = 11
	DOTA_GameMode_DOTA_GAMEMODE_LP                DOTA_GameMode = 12
	DOTA_GameMode_DOTA_GAMEMODE_POOL1             DOTA_GameMode = 13
	DOTA_GameMode_DOTA_GAMEMODE_FH                DOTA_GameMode = 14
	DOTA_GameMode_DOTA_GAMEMODE_CUSTOM            DOTA_GameMode = 15
	DOTA_GameMode_DOTA_GAMEMODE_CD                DOTA_GameMode = 16
	DOTA_GameMode_DOTA_GAMEMODE_BD                DOTA_GameMode = 17
	DOTA_GameMode_DOTA_GAMEMODE_ABILITY_DRAFT     DOTA_GameMode = 18
	DOTA_GameMode_DOTA_GAMEMODE_EVENT             DOTA_GameMode = 19
	DOTA_GameMode_DOTA_GAMEMODE_ARDM              DOTA_GameMode = 20
	DOTA_GameMode_DOTA_GAMEMODE_1V1MID            DOTA_GameMode = 21
	DOTA_GameMode_DOTA_GAMEMODE_ALL_DRAFT         DOTA_GameMode = 22
	DOTA_GameMode_DOTA_GAMEMODE_TURBO             DOTA_GameMode = 23
	DOTA_GameMode_DOTA_GAMEMODE_MUTATION          DOTA_GameMode = 24
	DOTA_GameMode_DOTA_GAMEMODE_COACHES_CHALLENGE DOTA_GameMode = 25
)

// Enum value maps for DOTA_GameMode.
var (
	DOTA_GameMode_name = map[int32]string{
		0:  "DOTA_GAMEMODE_NONE",
		1:  "DOTA_GAMEMODE_AP",
		2:  "DOTA_GAMEMODE_CM",
		3:  "DOTA_GAMEMODE_RD",
		4:  "DOTA_GAMEMODE_SD",
		5:  "DOTA_GAMEMODE_AR",
		6:  "DOTA_GAMEMODE_INTRO",
		7:  "DOTA_GAMEMODE_HW",
		8:  "DOTA_GAMEMODE_REVERSE_CM",
		9:  "DOTA_GAMEMODE_XMAS",
		10: "DOTA_GAMEMODE_TUTORIAL",
		11: "DOTA_GAMEMODE_MO",
		12: "DOTA_GAMEMODE_LP",
		13: "DOTA_GAMEMODE_POOL1",
		14: "DOTA_GAMEMODE_FH",
		15: "DOTA_GAMEMODE_CUSTOM",
		16: "DOTA_GAMEMODE_CD",
		17: "DOTA_GAMEMODE_BD",
		18: "DOTA_GAMEMODE_ABILITY_DRAFT",
		19: "DOTA_GAMEMODE_EVENT",
		20: "DOTA_GAMEMODE_ARDM",
		21: "DOTA_GAMEMODE_1V1MID",
		22: "DOTA_GAMEMODE_ALL_DRAFT",
		23: "DOTA_GAMEMODE_TURBO",
		24: "DOTA_GAMEMODE_MUTATION",
		25: "DOTA_GAMEMODE_COACHES_CHALLENGE",
	}
	DOTA_GameMode_value = map[string]int32{
		"DOTA_GAMEMODE_NONE":              0,
		"DOTA_GAMEMODE_AP":                1,
		"DOTA_GAMEMODE_CM":                2,
		"DOTA_GAMEMODE_RD":                3,
		"DOTA_GAMEMODE_SD":                4,
		"DOTA_GAMEMODE_AR":                5,
		"DOTA_GAMEMODE_INTRO":             6,
		"DOTA_GAMEMODE_HW":                7,
		"DOTA_GAMEMODE_REVERSE_CM":        8,
		"DOTA_GAMEMODE_XMAS":              9,
		"DOTA_GAMEMODE_TUTORIAL":          10,
		"DOTA_GAMEMODE_MO":                11,
		"DOTA_GAMEMODE_LP":                12,
		"DOTA_GAMEMODE_POOL1":             13,
		"DOTA_GAMEMODE_FH":                14,
		"DOTA_GAMEMODE_CUSTOM":            15,
		"DOTA_GAMEMODE_CD":                16,
		"DOTA_GAMEMODE_BD":                17,
		"DOTA_GAMEMODE_ABILITY_DRAFT":     18,
		"DOTA_GAMEMODE_EVENT":             19,
		"DOTA_GAMEMODE_ARDM":              20,
		"DOTA_GAMEMODE_1V1MID":            21,
		"DOTA_GAMEMODE_ALL_DRAFT":         22,
		"DOTA_GAMEMODE_TURBO":             23,
		"DOTA_GAMEMODE_MUTATION":          24,
		"DOTA_GAMEMODE_COACHES_CHALLENGE": 25,
	}
)

func (x DOTA_GameMode) Enum() *DOTA_GameMode {
	p := new(DOTA_GameMode)
	*p = x
	return p
}

func (x DOTA_GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_m_proto_enumTypes[0].Descriptor()
}

func (DOTA_GameMode) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_m_proto_enumTypes[0]
}

func (x DOTA_GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_GameMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_GameMode(num)
	return nil
}

// Deprecated: Use DOTA_GameMode.Descriptor instead.
func (DOTA_GameMode) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{0}
}

type EEvent int32

const (
	EEvent_EVENT_ID_NONE                    EEvent = 0
	EEvent_EVENT_ID_DIRETIDE                EEvent = 1
	EEvent_EVENT_ID_SPRING_FESTIVAL         EEvent = 2
	EEvent_EVENT_ID_FROSTIVUS_2013          EEvent = 3
	EEvent_EVENT_ID_COMPENDIUM_2014         EEvent = 4
	EEvent_EVENT_ID_NEXON_PC_BANG           EEvent = 5
	EEvent_EVENT_ID_PWRD_DAC_2015           EEvent = 6
	EEvent_EVENT_ID_NEW_BLOOM_2015          EEvent = 7
	EEvent_EVENT_ID_INTERNATIONAL_2015      EEvent = 8
	EEvent_EVENT_ID_FALL_MAJOR_2015         EEvent = 9
	EEvent_EVENT_ID_ORACLE_PA               EEvent = 10
	EEvent_EVENT_ID_NEW_BLOOM_2015_PREBEAST EEvent = 11
	EEvent_EVENT_ID_FROSTIVUS               EEvent = 12
	EEvent_EVENT_ID_WINTER_MAJOR_2016       EEvent = 13
	EEvent_EVENT_ID_INTERNATIONAL_2016      EEvent = 14
	EEvent_EVENT_ID_FALL_MAJOR_2016         EEvent = 15
	EEvent_EVENT_ID_WINTER_MAJOR_2017       EEvent = 16
	EEvent_EVENT_ID_NEW_BLOOM_2017          EEvent = 17
	EEvent_EVENT_ID_INTERNATIONAL_2017      EEvent = 18
	EEvent_EVENT_ID_PLUS_SUBSCRIPTION       EEvent = 19
	EEvent_EVENT_ID_SINGLES_DAY_2017        EEvent = 20
	EEvent_EVENT_ID_FROSTIVUS_2017          EEvent = 21
	EEvent_EVENT_ID_INTERNATIONAL_2018      EEvent = 22
	EEvent_EVENT_ID_FROSTIVUS_2018          EEvent = 23
	EEvent_EVENT_ID_NEW_BLOOM_2019          EEvent = 24
	EEvent_EVENT_ID_INTERNATIONAL_2019      EEvent = 25
	EEvent_EVENT_ID_NEW_PLAYER_EXPERIENCE   EEvent = 26
	EEvent_EVENT_ID_FROSTIVUS_2019          EEvent = 27
	EEvent_EVENT_ID_NEW_BLOOM_2020          EEvent = 28
	EEvent_EVENT_ID_INTERNATIONAL_2020      EEvent = 29
	EEvent_EVENT_ID_TEAM_FANDOM             EEvent = 30
	EEvent_EVENT_ID_DIRETIDE_2020           EEvent = 31
	EEvent_EVENT_ID_SPRING_2021             EEvent = 32
	EEvent_EVENT_ID_COUNT                   EEvent = 33
)

// Enum value maps for EEvent.
var (
	EEvent_name = map[int32]string{
		0:  "EVENT_ID_NONE",
		1:  "EVENT_ID_DIRETIDE",
		2:  "EVENT_ID_SPRING_FESTIVAL",
		3:  "EVENT_ID_FROSTIVUS_2013",
		4:  "EVENT_ID_COMPENDIUM_2014",
		5:  "EVENT_ID_NEXON_PC_BANG",
		6:  "EVENT_ID_PWRD_DAC_2015",
		7:  "EVENT_ID_NEW_BLOOM_2015",
		8:  "EVENT_ID_INTERNATIONAL_2015",
		9:  "EVENT_ID_FALL_MAJOR_2015",
		10: "EVENT_ID_ORACLE_PA",
		11: "EVENT_ID_NEW_BLOOM_2015_PREBEAST",
		12: "EVENT_ID_FROSTIVUS",
		13: "EVENT_ID_WINTER_MAJOR_2016",
		14: "EVENT_ID_INTERNATIONAL_2016",
		15: "EVENT_ID_FALL_MAJOR_2016",
		16: "EVENT_ID_WINTER_MAJOR_2017",
		17: "EVENT_ID_NEW_BLOOM_2017",
		18: "EVENT_ID_INTERNATIONAL_2017",
		19: "EVENT_ID_PLUS_SUBSCRIPTION",
		20: "EVENT_ID_SINGLES_DAY_2017",
		21: "EVENT_ID_FROSTIVUS_2017",
		22: "EVENT_ID_INTERNATIONAL_2018",
		23: "EVENT_ID_FROSTIVUS_2018",
		24: "EVENT_ID_NEW_BLOOM_2019",
		25: "EVENT_ID_INTERNATIONAL_2019",
		26: "EVENT_ID_NEW_PLAYER_EXPERIENCE",
		27: "EVENT_ID_FROSTIVUS_2019",
		28: "EVENT_ID_NEW_BLOOM_2020",
		29: "EVENT_ID_INTERNATIONAL_2020",
		30: "EVENT_ID_TEAM_FANDOM",
		31: "EVENT_ID_DIRETIDE_2020",
		32: "EVENT_ID_SPRING_2021",
		33: "EVENT_ID_COUNT",
	}
	EEvent_value = map[string]int32{
		"EVENT_ID_NONE":                    0,
		"EVENT_ID_DIRETIDE":                1,
		"EVENT_ID_SPRING_FESTIVAL":         2,
		"EVENT_ID_FROSTIVUS_2013":          3,
		"EVENT_ID_COMPENDIUM_2014":         4,
		"EVENT_ID_NEXON_PC_BANG":           5,
		"EVENT_ID_PWRD_DAC_2015":           6,
		"EVENT_ID_NEW_BLOOM_2015":          7,
		"EVENT_ID_INTERNATIONAL_2015":      8,
		"EVENT_ID_FALL_MAJOR_2015":         9,
		"EVENT_ID_ORACLE_PA":               10,
		"EVENT_ID_NEW_BLOOM_2015_PREBEAST": 11,
		"EVENT_ID_FROSTIVUS":               12,
		"EVENT_ID_WINTER_MAJOR_2016":       13,
		"EVENT_ID_INTERNATIONAL_2016":      14,
		"EVENT_ID_FALL_MAJOR_2016":         15,
		"EVENT_ID_WINTER_MAJOR_2017":       16,
		"EVENT_ID_NEW_BLOOM_2017":          17,
		"EVENT_ID_INTERNATIONAL_2017":      18,
		"EVENT_ID_PLUS_SUBSCRIPTION":       19,
		"EVENT_ID_SINGLES_DAY_2017":        20,
		"EVENT_ID_FROSTIVUS_2017":          21,
		"EVENT_ID_INTERNATIONAL_2018":      22,
		"EVENT_ID_FROSTIVUS_2018":          23,
		"EVENT_ID_NEW_BLOOM_2019":          24,
		"EVENT_ID_INTERNATIONAL_2019":      25,
		"EVENT_ID_NEW_PLAYER_EXPERIENCE":   26,
		"EVENT_ID_FROSTIVUS_2019":          27,
		"EVENT_ID_NEW_BLOOM_2020":          28,
		"EVENT_ID_INTERNATIONAL_2020":      29,
		"EVENT_ID_TEAM_FANDOM":             30,
		"EVENT_ID_DIRETIDE_2020":           31,
		"EVENT_ID_SPRING_2021":             32,
		"EVENT_ID_COUNT":                   33,
	}
)

func (x EEvent) Enum() *EEvent {
	p := new(EEvent)
	*p = x
	return p
}

func (x EEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_m_proto_enumTypes[1].Descriptor()
}

func (EEvent) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_m_proto_enumTypes[1]
}

func (x EEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEvent(num)
	return nil
}

// Deprecated: Use EEvent.Descriptor instead.
func (EEvent) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{1}
}

type EMatchOutcome int32

const (
	EMatchOutcome_k_EMatchOutcome_Unknown                         EMatchOutcome = 0
	EMatchOutcome_k_EMatchOutcome_RadVictory                      EMatchOutcome = 2
	EMatchOutcome_k_EMatchOutcome_DireVictory                     EMatchOutcome = 3
	EMatchOutcome_k_EMatchOutcome_NotScored_PoorNetworkConditions EMatchOutcome = 64
	EMatchOutcome_k_EMatchOutcome_NotScored_Leaver                EMatchOutcome = 65
	EMatchOutcome_k_EMatchOutcome_NotScored_ServerCrash           EMatchOutcome = 66
	EMatchOutcome_k_EMatchOutcome_NotScored_NeverStarted          EMatchOutcome = 67
	EMatchOutcome_k_EMatchOutcome_NotScored_Canceled              EMatchOutcome = 68
	EMatchOutcome_k_EMatchOutcome_NotScored_Suspicious            EMatchOutcome = 69
)

// Enum value maps for EMatchOutcome.
var (
	EMatchOutcome_name = map[int32]string{
		0:  "k_EMatchOutcome_Unknown",
		2:  "k_EMatchOutcome_RadVictory",
		3:  "k_EMatchOutcome_DireVictory",
		64: "k_EMatchOutcome_NotScored_PoorNetworkConditions",
		65: "k_EMatchOutcome_NotScored_Leaver",
		66: "k_EMatchOutcome_NotScored_ServerCrash",
		67: "k_EMatchOutcome_NotScored_NeverStarted",
		68: "k_EMatchOutcome_NotScored_Canceled",
		69: "k_EMatchOutcome_NotScored_Suspicious",
	}
	EMatchOutcome_value = map[string]int32{
		"k_EMatchOutcome_Unknown":                         0,
		"k_EMatchOutcome_RadVictory":                      2,
		"k_EMatchOutcome_DireVictory":                     3,
		"k_EMatchOutcome_NotScored_PoorNetworkConditions": 64,
		"k_EMatchOutcome_NotScored_Leaver":                65,
		"k_EMatchOutcome_NotScored_ServerCrash":           66,
		"k_EMatchOutcome_NotScored_NeverStarted":          67,
		"k_EMatchOutcome_NotScored_Canceled":              68,
		"k_EMatchOutcome_NotScored_Suspicious":            69,
	}
)

func (x EMatchOutcome) Enum() *EMatchOutcome {
	p := new(EMatchOutcome)
	*p = x
	return p
}

func (x EMatchOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMatchOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_m_proto_enumTypes[2].Descriptor()
}

func (EMatchOutcome) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_m_proto_enumTypes[2]
}

func (x EMatchOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMatchOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMatchOutcome(num)
	return nil
}

// Deprecated: Use EMatchOutcome.Descriptor instead.
func (EMatchOutcome) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{2}
}

type EDOTAPlayerMMRType int32

const (
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Invalid                EDOTAPlayerMMRType = 0
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralHidden          EDOTAPlayerMMRType = 1
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralCompetitive2019 EDOTAPlayerMMRType = 3
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloCompetitive2019    EDOTAPlayerMMRType = 4
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_1v1Competitive_UNUSED  EDOTAPlayerMMRType = 5
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralSeasonalRanked  EDOTAPlayerMMRType = 6
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloSeasonalRanked     EDOTAPlayerMMRType = 7
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Competitive_Core       EDOTAPlayerMMRType = 8
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Competitive_Support    EDOTAPlayerMMRType = 9
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Competitive_Classic    EDOTAPlayerMMRType = 10
)

// Enum value maps for EDOTAPlayerMMRType.
var (
	EDOTAPlayerMMRType_name = map[int32]string{
		0:  "k_EDOTAPlayerMMRType_Invalid",
		1:  "k_EDOTAPlayerMMRType_GeneralHidden",
		3:  "k_EDOTAPlayerMMRType_GeneralCompetitive2019",
		4:  "k_EDOTAPlayerMMRType_SoloCompetitive2019",
		5:  "k_EDOTAPlayerMMRType_1v1Competitive_UNUSED",
		6:  "k_EDOTAPlayerMMRType_GeneralSeasonalRanked",
		7:  "k_EDOTAPlayerMMRType_SoloSeasonalRanked",
		8:  "k_EDOTAPlayerMMRType_Competitive_Core",
		9:  "k_EDOTAPlayerMMRType_Competitive_Support",
		10: "k_EDOTAPlayerMMRType_Competitive_Classic",
	}
	EDOTAPlayerMMRType_value = map[string]int32{
		"k_EDOTAPlayerMMRType_Invalid":                0,
		"k_EDOTAPlayerMMRType_GeneralHidden":          1,
		"k_EDOTAPlayerMMRType_GeneralCompetitive2019": 3,
		"k_EDOTAPlayerMMRType_SoloCompetitive2019":    4,
		"k_EDOTAPlayerMMRType_1v1Competitive_UNUSED":  5,
		"k_EDOTAPlayerMMRType_GeneralSeasonalRanked":  6,
		"k_EDOTAPlayerMMRType_SoloSeasonalRanked":     7,
		"k_EDOTAPlayerMMRType_Competitive_Core":       8,
		"k_EDOTAPlayerMMRType_Competitive_Support":    9,
		"k_EDOTAPlayerMMRType_Competitive_Classic":    10,
	}
)

func (x EDOTAPlayerMMRType) Enum() *EDOTAPlayerMMRType {
	p := new(EDOTAPlayerMMRType)
	*p = x
	return p
}

func (x EDOTAPlayerMMRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAPlayerMMRType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_m_proto_enumTypes[3].Descriptor()
}

func (EDOTAPlayerMMRType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_m_proto_enumTypes[3]
}

func (x EDOTAPlayerMMRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAPlayerMMRType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAPlayerMMRType(num)
	return nil
}

// Deprecated: Use EDOTAPlayerMMRType.Descriptor instead.
func (EDOTAPlayerMMRType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{3}
}

type EDOTAMMRBoostType int32

const (
	EDOTAMMRBoostType_k_EDOTAMMRBoostType_None     EDOTAMMRBoostType = 0
	EDOTAMMRBoostType_k_EDOTAMMRBoostType_Leader   EDOTAMMRBoostType = 1
	EDOTAMMRBoostType_k_EDOTAMMRBoostType_Follower EDOTAMMRBoostType = 2
)

// Enum value maps for EDOTAMMRBoostType.
var (
	EDOTAMMRBoostType_name = map[int32]string{
		0: "k_EDOTAMMRBoostType_None",
		1: "k_EDOTAMMRBoostType_Leader",
		2: "k_EDOTAMMRBoostType_Follower",
	}
	EDOTAMMRBoostType_value = map[string]int32{
		"k_EDOTAMMRBoostType_None":     0,
		"k_EDOTAMMRBoostType_Leader":   1,
		"k_EDOTAMMRBoostType_Follower": 2,
	}
)

func (x EDOTAMMRBoostType) Enum() *EDOTAMMRBoostType {
	p := new(EDOTAMMRBoostType)
	*p = x
	return p
}

func (x EDOTAMMRBoostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAMMRBoostType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_m_proto_enumTypes[4].Descriptor()
}

func (EDOTAMMRBoostType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_m_proto_enumTypes[4]
}

func (x EDOTAMMRBoostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAMMRBoostType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAMMRBoostType(num)
	return nil
}

// Deprecated: Use EDOTAMMRBoostType.Descriptor instead.
func (EDOTAMMRBoostType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4}
}

type CMsgDOTAMatch_ReplayState int32

const (
	CMsgDOTAMatch_REPLAY_AVAILABLE    CMsgDOTAMatch_ReplayState = 0
	CMsgDOTAMatch_REPLAY_NOT_RECORDED CMsgDOTAMatch_ReplayState = 1
	CMsgDOTAMatch_REPLAY_EXPIRED      CMsgDOTAMatch_ReplayState = 2
)

// Enum value maps for CMsgDOTAMatch_ReplayState.
var (
	CMsgDOTAMatch_ReplayState_name = map[int32]string{
		0: "REPLAY_AVAILABLE",
		1: "REPLAY_NOT_RECORDED",
		2: "REPLAY_EXPIRED",
	}
	CMsgDOTAMatch_ReplayState_value = map[string]int32{
		"REPLAY_AVAILABLE":    0,
		"REPLAY_NOT_RECORDED": 1,
		"REPLAY_EXPIRED":      2,
	}
)

func (x CMsgDOTAMatch_ReplayState) Enum() *CMsgDOTAMatch_ReplayState {
	p := new(CMsgDOTAMatch_ReplayState)
	*p = x
	return p
}

func (x CMsgDOTAMatch_ReplayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAMatch_ReplayState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_m_proto_enumTypes[5].Descriptor()
}

func (CMsgDOTAMatch_ReplayState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_m_proto_enumTypes[5]
}

func (x CMsgDOTAMatch_ReplayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAMatch_ReplayState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAMatch_ReplayState(num)
	return nil
}

// Deprecated: Use CMsgDOTAMatch_ReplayState.Descriptor instead.
func (CMsgDOTAMatch_ReplayState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4, 0}
}

type CMatchPlayerAbilityUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ability *uint32 `protobuf:"varint,1,opt,name=ability" json:"ability,omitempty"`
	Time    *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *CMatchPlayerAbilityUpgrade) Reset() {
	*x = CMatchPlayerAbilityUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchPlayerAbilityUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerAbilityUpgrade) ProtoMessage() {}

func (x *CMatchPlayerAbilityUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerAbilityUpgrade.ProtoReflect.Descriptor instead.
func (*CMatchPlayerAbilityUpgrade) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{0}
}

func (x *CMatchPlayerAbilityUpgrade) GetAbility() uint32 {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return 0
}

func (x *CMatchPlayerAbilityUpgrade) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type CMatchAdditionalUnitInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName *string  `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	Items    []uint32 `protobuf:"varint,2,rep,name=items" json:"items,omitempty"`
}

func (x *CMatchAdditionalUnitInventory) Reset() {
	*x = CMatchAdditionalUnitInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchAdditionalUnitInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchAdditionalUnitInventory) ProtoMessage() {}

func (x *CMatchAdditionalUnitInventory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchAdditionalUnitInventory.ProtoReflect.Descriptor instead.
func (*CMatchAdditionalUnitInventory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{1}
}

func (x *CMatchAdditionalUnitInventory) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *CMatchAdditionalUnitInventory) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

type CMatchPlayerPermanentBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentBuff *uint32 `protobuf:"varint,1,opt,name=permanent_buff,json=permanentBuff" json:"permanent_buff,omitempty"`
	StackCount    *uint32 `protobuf:"varint,2,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
}

func (x *CMatchPlayerPermanentBuff) Reset() {
	*x = CMatchPlayerPermanentBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchPlayerPermanentBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerPermanentBuff) ProtoMessage() {}

func (x *CMatchPlayerPermanentBuff) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerPermanentBuff.ProtoReflect.Descriptor instead.
func (*CMatchPlayerPermanentBuff) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{2}
}

func (x *CMatchPlayerPermanentBuff) GetPermanentBuff() uint32 {
	if x != nil && x.PermanentBuff != nil {
		return *x.PermanentBuff
	}
	return 0
}

func (x *CMatchPlayerPermanentBuff) GetStackCount() uint32 {
	if x != nil && x.StackCount != nil {
		return *x.StackCount
	}
	return 0
}

type CMatchHeroSelectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPick *bool   `protobuf:"varint,1,opt,name=is_pick,json=isPick" json:"is_pick,omitempty"`
	Team   *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMatchHeroSelectEvent) Reset() {
	*x = CMatchHeroSelectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchHeroSelectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchHeroSelectEvent) ProtoMessage() {}

func (x *CMatchHeroSelectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchHeroSelectEvent.ProtoReflect.Descriptor instead.
func (*CMatchHeroSelectEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{3}
}

func (x *CMatchHeroSelectEvent) GetIsPick() bool {
	if x != nil && x.IsPick != nil {
		return *x.IsPick
	}
	return false
}

func (x *CMatchHeroSelectEvent) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMatchHeroSelectEvent) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgDOTAMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodGuysWin         *bool                               `protobuf:"varint,2,opt,name=good_guys_win,json=goodGuysWin" json:"good_guys_win,omitempty"`
	Duration            *uint32                             `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	StartTime           *uint32                             `protobuf:"fixed32,4,opt,name=startTime" json:"startTime,omitempty"`
	Players             []*CMsgDOTAMatch_Player             `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	MatchId             *uint64                             `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TowerStatus         []uint32                            `protobuf:"varint,8,rep,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus      []uint32                            `protobuf:"varint,9,rep,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster             *uint32                             `protobuf:"varint,10,opt,name=cluster" json:"cluster,omitempty"`
	FirstBloodTime      *uint32                             `protobuf:"varint,12,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	ReplaySalt          *uint32                             `protobuf:"fixed32,13,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	ServerIp            *uint32                             `protobuf:"fixed32,14,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort          *uint32                             `protobuf:"varint,15,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LobbyType           *uint32                             `protobuf:"varint,16,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	HumanPlayers        *uint32                             `protobuf:"varint,17,opt,name=human_players,json=humanPlayers" json:"human_players,omitempty"`
	AverageSkill        *uint32                             `protobuf:"varint,18,opt,name=average_skill,json=averageSkill" json:"average_skill,omitempty"`
	GameBalance         *float32                            `protobuf:"fixed32,19,opt,name=game_balance,json=gameBalance" json:"game_balance,omitempty"`
	RadiantTeamId       *uint32                             `protobuf:"varint,20,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	DireTeamId          *uint32                             `protobuf:"varint,21,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	Leagueid            *uint32                             `protobuf:"varint,22,opt,name=leagueid" json:"leagueid,omitempty"`
	RadiantTeamName     *string                             `protobuf:"bytes,23,opt,name=radiant_team_name,json=radiantTeamName" json:"radiant_team_name,omitempty"`
	DireTeamName        *string                             `protobuf:"bytes,24,opt,name=dire_team_name,json=direTeamName" json:"dire_team_name,omitempty"`
	RadiantTeamLogo     *uint64                             `protobuf:"varint,25,opt,name=radiant_team_logo,json=radiantTeamLogo" json:"radiant_team_logo,omitempty"`
	DireTeamLogo        *uint64                             `protobuf:"varint,26,opt,name=dire_team_logo,json=direTeamLogo" json:"dire_team_logo,omitempty"`
	RadiantTeamComplete *uint32                             `protobuf:"varint,27,opt,name=radiant_team_complete,json=radiantTeamComplete" json:"radiant_team_complete,omitempty"`
	DireTeamComplete    *uint32                             `protobuf:"varint,28,opt,name=dire_team_complete,json=direTeamComplete" json:"dire_team_complete,omitempty"`
	PositiveVotes       *uint32                             `protobuf:"varint,29,opt,name=positive_votes,json=positiveVotes" json:"positive_votes,omitempty"`
	NegativeVotes       *uint32                             `protobuf:"varint,30,opt,name=negative_votes,json=negativeVotes" json:"negative_votes,omitempty"`
	GameMode            *DOTA_GameMode                      `protobuf:"varint,31,opt,name=game_mode,json=gameMode,enum=mango.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	PicksBans           []*CMatchHeroSelectEvent            `protobuf:"bytes,32,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	MatchSeqNum         *uint64                             `protobuf:"varint,33,opt,name=match_seq_num,json=matchSeqNum" json:"match_seq_num,omitempty"`
	ReplayState         *CMsgDOTAMatch_ReplayState          `protobuf:"varint,34,opt,name=replay_state,json=replayState,enum=mango.CMsgDOTAMatch_ReplayState,def=0" json:"replay_state,omitempty"`
	RadiantGuildId      *uint32                             `protobuf:"varint,35,opt,name=radiant_guild_id,json=radiantGuildId" json:"radiant_guild_id,omitempty"`
	DireGuildId         *uint32                             `protobuf:"varint,36,opt,name=dire_guild_id,json=direGuildId" json:"dire_guild_id,omitempty"`
	RadiantTeamTag      *string                             `protobuf:"bytes,37,opt,name=radiant_team_tag,json=radiantTeamTag" json:"radiant_team_tag,omitempty"`
	DireTeamTag         *string                             `protobuf:"bytes,38,opt,name=dire_team_tag,json=direTeamTag" json:"dire_team_tag,omitempty"`
	SeriesId            *uint32                             `protobuf:"varint,39,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType          *uint32                             `protobuf:"varint,40,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	BroadcasterChannels []*CMsgDOTAMatch_BroadcasterChannel `protobuf:"bytes,43,rep,name=broadcaster_channels,json=broadcasterChannels" json:"broadcaster_channels,omitempty"`
	Engine              *uint32                             `protobuf:"varint,44,opt,name=engine" json:"engine,omitempty"`
	CustomGameData      *CMsgDOTAMatch_CustomGameData       `protobuf:"bytes,45,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchFlags          *uint32                             `protobuf:"varint,46,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	PrivateMetadataKey  *uint32                             `protobuf:"fixed32,47,opt,name=private_metadata_key,json=privateMetadataKey" json:"private_metadata_key,omitempty"`
	RadiantTeamScore    *uint32                             `protobuf:"varint,48,opt,name=radiant_team_score,json=radiantTeamScore" json:"radiant_team_score,omitempty"`
	DireTeamScore       *uint32                             `protobuf:"varint,49,opt,name=dire_team_score,json=direTeamScore" json:"dire_team_score,omitempty"`
	MatchOutcome        *EMatchOutcome                      `protobuf:"varint,50,opt,name=match_outcome,json=matchOutcome,enum=mango.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	TournamentId        *uint32                             `protobuf:"varint,51,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentRound     *uint32                             `protobuf:"varint,52,opt,name=tournament_round,json=tournamentRound" json:"tournament_round,omitempty"`
	PreGameDuration     *uint32                             `protobuf:"varint,53,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
}

// Default values for CMsgDOTAMatch fields.
const (
	Default_CMsgDOTAMatch_GameMode     = DOTA_GameMode_DOTA_GAMEMODE_NONE
	Default_CMsgDOTAMatch_ReplayState  = CMsgDOTAMatch_REPLAY_AVAILABLE
	Default_CMsgDOTAMatch_MatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
)

func (x *CMsgDOTAMatch) Reset() {
	*x = CMsgDOTAMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch) ProtoMessage() {}

func (x *CMsgDOTAMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgDOTAMatch) GetGoodGuysWin() bool {
	if x != nil && x.GoodGuysWin != nil {
		return *x.GoodGuysWin
	}
	return false
}

func (x *CMsgDOTAMatch) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDOTAMatch) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPlayers() []*CMsgDOTAMatch_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTAMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetTowerStatus() []uint32 {
	if x != nil {
		return x.TowerStatus
	}
	return nil
}

func (x *CMsgDOTAMatch) GetBarracksStatus() []uint32 {
	if x != nil {
		return x.BarracksStatus
	}
	return nil
}

func (x *CMsgDOTAMatch) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

func (x *CMsgDOTAMatch) GetFirstBloodTime() uint32 {
	if x != nil && x.FirstBloodTime != nil {
		return *x.FirstBloodTime
	}
	return 0
}

func (x *CMsgDOTAMatch) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CMsgDOTAMatch) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CMsgDOTAMatch) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgDOTAMatch) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgDOTAMatch) GetHumanPlayers() uint32 {
	if x != nil && x.HumanPlayers != nil {
		return *x.HumanPlayers
	}
	return 0
}

func (x *CMsgDOTAMatch) GetAverageSkill() uint32 {
	if x != nil && x.AverageSkill != nil {
		return *x.AverageSkill
	}
	return 0
}

func (x *CMsgDOTAMatch) GetGameBalance() float32 {
	if x != nil && x.GameBalance != nil {
		return *x.GameBalance
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamId() uint32 {
	if x != nil && x.RadiantTeamId != nil {
		return *x.RadiantTeamId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamId() uint32 {
	if x != nil && x.DireTeamId != nil {
		return *x.DireTeamId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamName() string {
	if x != nil && x.RadiantTeamName != nil {
		return *x.RadiantTeamName
	}
	return ""
}

func (x *CMsgDOTAMatch) GetDireTeamName() string {
	if x != nil && x.DireTeamName != nil {
		return *x.DireTeamName
	}
	return ""
}

func (x *CMsgDOTAMatch) GetRadiantTeamLogo() uint64 {
	if x != nil && x.RadiantTeamLogo != nil {
		return *x.RadiantTeamLogo
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamLogo() uint64 {
	if x != nil && x.DireTeamLogo != nil {
		return *x.DireTeamLogo
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamComplete() uint32 {
	if x != nil && x.RadiantTeamComplete != nil {
		return *x.RadiantTeamComplete
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamComplete() uint32 {
	if x != nil && x.DireTeamComplete != nil {
		return *x.DireTeamComplete
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPositiveVotes() uint32 {
	if x != nil && x.PositiveVotes != nil {
		return *x.PositiveVotes
	}
	return 0
}

func (x *CMsgDOTAMatch) GetNegativeVotes() uint32 {
	if x != nil && x.NegativeVotes != nil {
		return *x.NegativeVotes
	}
	return 0
}

func (x *CMsgDOTAMatch) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgDOTAMatch_GameMode
}

func (x *CMsgDOTAMatch) GetPicksBans() []*CMatchHeroSelectEvent {
	if x != nil {
		return x.PicksBans
	}
	return nil
}

func (x *CMsgDOTAMatch) GetMatchSeqNum() uint64 {
	if x != nil && x.MatchSeqNum != nil {
		return *x.MatchSeqNum
	}
	return 0
}

func (x *CMsgDOTAMatch) GetReplayState() CMsgDOTAMatch_ReplayState {
	if x != nil && x.ReplayState != nil {
		return *x.ReplayState
	}
	return Default_CMsgDOTAMatch_ReplayState
}

func (x *CMsgDOTAMatch) GetRadiantGuildId() uint32 {
	if x != nil && x.RadiantGuildId != nil {
		return *x.RadiantGuildId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireGuildId() uint32 {
	if x != nil && x.DireGuildId != nil {
		return *x.DireGuildId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamTag() string {
	if x != nil && x.RadiantTeamTag != nil {
		return *x.RadiantTeamTag
	}
	return ""
}

func (x *CMsgDOTAMatch) GetDireTeamTag() string {
	if x != nil && x.DireTeamTag != nil {
		return *x.DireTeamTag
	}
	return ""
}

func (x *CMsgDOTAMatch) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTAMatch) GetBroadcasterChannels() []*CMsgDOTAMatch_BroadcasterChannel {
	if x != nil {
		return x.BroadcasterChannels
	}
	return nil
}

func (x *CMsgDOTAMatch) GetEngine() uint32 {
	if x != nil && x.Engine != nil {
		return *x.Engine
	}
	return 0
}

func (x *CMsgDOTAMatch) GetCustomGameData() *CMsgDOTAMatch_CustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgDOTAMatch) GetMatchFlags() uint32 {
	if x != nil && x.MatchFlags != nil {
		return *x.MatchFlags
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPrivateMetadataKey() uint32 {
	if x != nil && x.PrivateMetadataKey != nil {
		return *x.PrivateMetadataKey
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamScore() uint32 {
	if x != nil && x.RadiantTeamScore != nil {
		return *x.RadiantTeamScore
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamScore() uint32 {
	if x != nil && x.DireTeamScore != nil {
		return *x.DireTeamScore
	}
	return 0
}

func (x *CMsgDOTAMatch) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CMsgDOTAMatch_MatchOutcome
}

func (x *CMsgDOTAMatch) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetTournamentRound() uint32 {
	if x != nil && x.TournamentRound != nil {
		return *x.TournamentRound
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPreGameDuration() uint32 {
	if x != nil && x.PreGameDuration != nil {
		return *x.PreGameDuration
	}
	return 0
}

type CMsgMatchTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *EEvent                    `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=mango.EEvent,def=0" json:"event_id,omitempty"`
	Tips    []*CMsgMatchTips_SingleTip `protobuf:"bytes,2,rep,name=tips" json:"tips,omitempty"`
}

// Default values for CMsgMatchTips fields.
const (
	Default_CMsgMatchTips_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgMatchTips) Reset() {
	*x = CMsgMatchTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchTips) ProtoMessage() {}

func (x *CMsgMatchTips) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchTips.ProtoReflect.Descriptor instead.
func (*CMsgMatchTips) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgMatchTips) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgMatchTips_EventId
}

func (x *CMsgMatchTips) GetTips() []*CMsgMatchTips_SingleTip {
	if x != nil {
		return x.Tips
	}
	return nil
}

type CMsgDOTAMatch_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                *uint32                              `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot               *uint32                              `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId                   *uint32                              `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Item_0                   *uint32                              `protobuf:"varint,4,opt,name=item_0,json=item0" json:"item_0,omitempty"`
	Item_1                   *uint32                              `protobuf:"varint,5,opt,name=item_1,json=item1" json:"item_1,omitempty"`
	Item_2                   *uint32                              `protobuf:"varint,6,opt,name=item_2,json=item2" json:"item_2,omitempty"`
	Item_3                   *uint32                              `protobuf:"varint,7,opt,name=item_3,json=item3" json:"item_3,omitempty"`
	Item_4                   *uint32                              `protobuf:"varint,8,opt,name=item_4,json=item4" json:"item_4,omitempty"`
	Item_5                   *uint32                              `protobuf:"varint,9,opt,name=item_5,json=item5" json:"item_5,omitempty"`
	Item_6                   *uint32                              `protobuf:"varint,59,opt,name=item_6,json=item6" json:"item_6,omitempty"`
	Item_7                   *uint32                              `protobuf:"varint,60,opt,name=item_7,json=item7" json:"item_7,omitempty"`
	Item_8                   *uint32                              `protobuf:"varint,61,opt,name=item_8,json=item8" json:"item_8,omitempty"`
	ExpectedTeamContribution *float32                             `protobuf:"fixed32,10,opt,name=expected_team_contribution,json=expectedTeamContribution" json:"expected_team_contribution,omitempty"`
	ScaledMetric             *float32                             `protobuf:"fixed32,11,opt,name=scaled_metric,json=scaledMetric" json:"scaled_metric,omitempty"`
	PreviousRank             *uint32                              `protobuf:"varint,12,opt,name=previous_rank,json=previousRank" json:"previous_rank,omitempty"`
	RankChange               *int32                               `protobuf:"zigzag32,13,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	SoloRank                 *bool                                `protobuf:"varint,49,opt,name=solo_rank,json=soloRank" json:"solo_rank,omitempty"`
	SeasonalRank             *bool                                `protobuf:"varint,53,opt,name=seasonal_rank,json=seasonalRank" json:"seasonal_rank,omitempty"`
	RankTierUpdated          *bool                                `protobuf:"varint,66,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	Kills                    *uint32                              `protobuf:"varint,14,opt,name=kills" json:"kills,omitempty"`
	Deaths                   *uint32                              `protobuf:"varint,15,opt,name=deaths" json:"deaths,omitempty"`
	Assists                  *uint32                              `protobuf:"varint,16,opt,name=assists" json:"assists,omitempty"`
	LeaverStatus             *uint32                              `protobuf:"varint,17,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	Gold                     *uint32                              `protobuf:"varint,18,opt,name=gold" json:"gold,omitempty"`
	LastHits                 *uint32                              `protobuf:"varint,19,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                   *uint32                              `protobuf:"varint,20,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin               *uint32                              `protobuf:"varint,21,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XPPerMin                 *uint32                              `protobuf:"varint,22,opt,name=XP_per_min,json=XPPerMin" json:"XP_per_min,omitempty"`
	GoldSpent                *uint32                              `protobuf:"varint,23,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	HeroDamage               *uint32                              `protobuf:"varint,24,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage              *uint32                              `protobuf:"varint,25,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing              *uint32                              `protobuf:"varint,26,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	Level                    *uint32                              `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	TimeLastSeen             *uint32                              `protobuf:"varint,28,opt,name=time_last_seen,json=timeLastSeen" json:"time_last_seen,omitempty"`
	PlayerName               *string                              `protobuf:"bytes,29,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	SupportAbilityValue      *uint32                              `protobuf:"varint,30,opt,name=support_ability_value,json=supportAbilityValue" json:"support_ability_value,omitempty"`
	FeedingDetected          *bool                                `protobuf:"varint,32,opt,name=feeding_detected,json=feedingDetected" json:"feeding_detected,omitempty"`
	SearchRank               *uint32                              `protobuf:"varint,34,opt,name=search_rank,json=searchRank" json:"search_rank,omitempty"`
	SearchRankUncertainty    *uint32                              `protobuf:"varint,35,opt,name=search_rank_uncertainty,json=searchRankUncertainty" json:"search_rank_uncertainty,omitempty"`
	RankUncertaintyChange    *int32                               `protobuf:"varint,36,opt,name=rank_uncertainty_change,json=rankUncertaintyChange" json:"rank_uncertainty_change,omitempty"`
	HeroPlayCount            *uint32                              `protobuf:"varint,37,opt,name=hero_play_count,json=heroPlayCount" json:"hero_play_count,omitempty"`
	PartyId                  *uint64                              `protobuf:"fixed64,38,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ScaledHeroDamage         *uint32                              `protobuf:"varint,54,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage        *uint32                              `protobuf:"varint,55,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing        *uint32                              `protobuf:"varint,56,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	ScaledKills              *float32                             `protobuf:"fixed32,39,opt,name=scaled_kills,json=scaledKills" json:"scaled_kills,omitempty"`
	ScaledDeaths             *float32                             `protobuf:"fixed32,40,opt,name=scaled_deaths,json=scaledDeaths" json:"scaled_deaths,omitempty"`
	ScaledAssists            *float32                             `protobuf:"fixed32,41,opt,name=scaled_assists,json=scaledAssists" json:"scaled_assists,omitempty"`
	ClaimedFarmGold          *uint32                              `protobuf:"varint,42,opt,name=claimed_farm_gold,json=claimedFarmGold" json:"claimed_farm_gold,omitempty"`
	SupportGold              *uint32                              `protobuf:"varint,43,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	ClaimedDenies            *uint32                              `protobuf:"varint,44,opt,name=claimed_denies,json=claimedDenies" json:"claimed_denies,omitempty"`
	ClaimedMisses            *uint32                              `protobuf:"varint,45,opt,name=claimed_misses,json=claimedMisses" json:"claimed_misses,omitempty"`
	Misses                   *uint32                              `protobuf:"varint,46,opt,name=misses" json:"misses,omitempty"`
	AbilityUpgrades          []*CMatchPlayerAbilityUpgrade        `protobuf:"bytes,47,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	AdditionalUnitsInventory []*CMatchAdditionalUnitInventory     `protobuf:"bytes,48,rep,name=additional_units_inventory,json=additionalUnitsInventory" json:"additional_units_inventory,omitempty"`
	PermanentBuffs           []*CMatchPlayerPermanentBuff         `protobuf:"bytes,57,rep,name=permanent_buffs,json=permanentBuffs" json:"permanent_buffs,omitempty"`
	CustomGameData           *CMsgDOTAMatch_Player_CustomGameData `protobuf:"bytes,50,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	ActivePrimeSubscription  *bool                                `protobuf:"varint,51,opt,name=active_prime_subscription,json=activePrimeSubscription" json:"active_prime_subscription,omitempty"`
	NetWorth                 *uint32                              `protobuf:"varint,52,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	BotDifficulty            *uint32                              `protobuf:"varint,58,opt,name=bot_difficulty,json=botDifficulty" json:"bot_difficulty,omitempty"`
	HeroPickOrder            *uint32                              `protobuf:"varint,63,opt,name=hero_pick_order,json=heroPickOrder" json:"hero_pick_order,omitempty"`
	HeroWasRandomed          *bool                                `protobuf:"varint,64,opt,name=hero_was_randomed,json=heroWasRandomed" json:"hero_was_randomed,omitempty"`
	HeroWasBonus             *bool                                `protobuf:"varint,65,opt,name=hero_was_bonus,json=heroWasBonus" json:"hero_was_bonus,omitempty"`
}

func (x *CMsgDOTAMatch_Player) Reset() {
	*x = CMsgDOTAMatch_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_Player) ProtoMessage() {}

func (x *CMsgDOTAMatch_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CMsgDOTAMatch_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_0() uint32 {
	if x != nil && x.Item_0 != nil {
		return *x.Item_0
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_1() uint32 {
	if x != nil && x.Item_1 != nil {
		return *x.Item_1
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_2() uint32 {
	if x != nil && x.Item_2 != nil {
		return *x.Item_2
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_3() uint32 {
	if x != nil && x.Item_3 != nil {
		return *x.Item_3
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_4() uint32 {
	if x != nil && x.Item_4 != nil {
		return *x.Item_4
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_5() uint32 {
	if x != nil && x.Item_5 != nil {
		return *x.Item_5
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_6() uint32 {
	if x != nil && x.Item_6 != nil {
		return *x.Item_6
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_7() uint32 {
	if x != nil && x.Item_7 != nil {
		return *x.Item_7
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_8() uint32 {
	if x != nil && x.Item_8 != nil {
		return *x.Item_8
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetExpectedTeamContribution() float32 {
	if x != nil && x.ExpectedTeamContribution != nil {
		return *x.ExpectedTeamContribution
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledMetric() float32 {
	if x != nil && x.ScaledMetric != nil {
		return *x.ScaledMetric
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPreviousRank() uint32 {
	if x != nil && x.PreviousRank != nil {
		return *x.PreviousRank
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetSoloRank() bool {
	if x != nil && x.SoloRank != nil {
		return *x.SoloRank
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetSeasonalRank() bool {
	if x != nil && x.SeasonalRank != nil {
		return *x.SeasonalRank
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetRankTierUpdated() bool {
	if x != nil && x.RankTierUpdated != nil {
		return *x.RankTierUpdated
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLeaverStatus() uint32 {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGoldPerMin() uint32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetXPPerMin() uint32 {
	if x != nil && x.XPPerMin != nil {
		return *x.XPPerMin
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGoldSpent() uint32 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroDamage() uint32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetTowerDamage() uint32 {
	if x != nil && x.TowerDamage != nil {
		return *x.TowerDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroHealing() uint32 {
	if x != nil && x.HeroHealing != nil {
		return *x.HeroHealing
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetTimeLastSeen() uint32 {
	if x != nil && x.TimeLastSeen != nil {
		return *x.TimeLastSeen
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTAMatch_Player) GetSupportAbilityValue() uint32 {
	if x != nil && x.SupportAbilityValue != nil {
		return *x.SupportAbilityValue
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetFeedingDetected() bool {
	if x != nil && x.FeedingDetected != nil {
		return *x.FeedingDetected
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetSearchRank() uint32 {
	if x != nil && x.SearchRank != nil {
		return *x.SearchRank
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetSearchRankUncertainty() uint32 {
	if x != nil && x.SearchRankUncertainty != nil {
		return *x.SearchRankUncertainty
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetRankUncertaintyChange() int32 {
	if x != nil && x.RankUncertaintyChange != nil {
		return *x.RankUncertaintyChange
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroPlayCount() uint32 {
	if x != nil && x.HeroPlayCount != nil {
		return *x.HeroPlayCount
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledHeroDamage() uint32 {
	if x != nil && x.ScaledHeroDamage != nil {
		return *x.ScaledHeroDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledTowerDamage() uint32 {
	if x != nil && x.ScaledTowerDamage != nil {
		return *x.ScaledTowerDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledHeroHealing() uint32 {
	if x != nil && x.ScaledHeroHealing != nil {
		return *x.ScaledHeroHealing
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledKills() float32 {
	if x != nil && x.ScaledKills != nil {
		return *x.ScaledKills
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledDeaths() float32 {
	if x != nil && x.ScaledDeaths != nil {
		return *x.ScaledDeaths
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledAssists() float32 {
	if x != nil && x.ScaledAssists != nil {
		return *x.ScaledAssists
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetClaimedFarmGold() uint32 {
	if x != nil && x.ClaimedFarmGold != nil {
		return *x.ClaimedFarmGold
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetSupportGold() uint32 {
	if x != nil && x.SupportGold != nil {
		return *x.SupportGold
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetClaimedDenies() uint32 {
	if x != nil && x.ClaimedDenies != nil {
		return *x.ClaimedDenies
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetClaimedMisses() uint32 {
	if x != nil && x.ClaimedMisses != nil {
		return *x.ClaimedMisses
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetMisses() uint32 {
	if x != nil && x.Misses != nil {
		return *x.Misses
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetAbilityUpgrades() []*CMatchPlayerAbilityUpgrade {
	if x != nil {
		return x.AbilityUpgrades
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetAdditionalUnitsInventory() []*CMatchAdditionalUnitInventory {
	if x != nil {
		return x.AdditionalUnitsInventory
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetPermanentBuffs() []*CMatchPlayerPermanentBuff {
	if x != nil {
		return x.PermanentBuffs
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetCustomGameData() *CMsgDOTAMatch_Player_CustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetActivePrimeSubscription() bool {
	if x != nil && x.ActivePrimeSubscription != nil {
		return *x.ActivePrimeSubscription
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetBotDifficulty() uint32 {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroPickOrder() uint32 {
	if x != nil && x.HeroPickOrder != nil {
		return *x.HeroPickOrder
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroWasRandomed() bool {
	if x != nil && x.HeroWasRandomed != nil {
		return *x.HeroWasRandomed
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetHeroWasBonus() bool {
	if x != nil && x.HeroWasBonus != nil {
		return *x.HeroWasBonus
	}
	return false
}

type CMsgDOTAMatch_BroadcasterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgDOTAMatch_BroadcasterInfo) Reset() {
	*x = CMsgDOTAMatch_BroadcasterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_BroadcasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_BroadcasterInfo) ProtoMessage() {}

func (x *CMsgDOTAMatch_BroadcasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_BroadcasterInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_BroadcasterInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CMsgDOTAMatch_BroadcasterInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatch_BroadcasterInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgDOTAMatch_BroadcasterChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode      *string                          `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description      *string                          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	BroadcasterInfos []*CMsgDOTAMatch_BroadcasterInfo `protobuf:"bytes,3,rep,name=broadcaster_infos,json=broadcasterInfos" json:"broadcaster_infos,omitempty"`
	LanguageCode     *string                          `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (x *CMsgDOTAMatch_BroadcasterChannel) Reset() {
	*x = CMsgDOTAMatch_BroadcasterChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_BroadcasterChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_BroadcasterChannel) ProtoMessage() {}

func (x *CMsgDOTAMatch_BroadcasterChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_BroadcasterChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_BroadcasterChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4, 2}
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetBroadcasterInfos() []*CMsgDOTAMatch_BroadcasterInfo {
	if x != nil {
		return x.BroadcasterInfos
	}
	return nil
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

type CMsgDOTAMatch_CustomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomGameId *uint64 `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	MapName      *string `protobuf:"bytes,2,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
}

func (x *CMsgDOTAMatch_CustomGameData) Reset() {
	*x = CMsgDOTAMatch_CustomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_CustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_CustomGameData) ProtoMessage() {}

func (x *CMsgDOTAMatch_CustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_CustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_CustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4, 3}
}

func (x *CMsgDOTAMatch_CustomGameData) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgDOTAMatch_CustomGameData) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

type CMsgDOTAMatch_Player_CustomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DotaTeam *uint32 `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Winner   *bool   `protobuf:"varint,2,opt,name=winner" json:"winner,omitempty"`
}

func (x *CMsgDOTAMatch_Player_CustomGameData) Reset() {
	*x = CMsgDOTAMatch_Player_CustomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_Player_CustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_Player_CustomGameData) ProtoMessage() {}

func (x *CMsgDOTAMatch_Player_CustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_Player_CustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_Player_CustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *CMsgDOTAMatch_Player_CustomGameData) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CMsgDOTAMatch_Player_CustomGameData) GetWinner() bool {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return false
}

type CMsgMatchTips_SingleTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccountId *uint32 `protobuf:"varint,1,opt,name=source_account_id,json=sourceAccountId" json:"source_account_id,omitempty"`
	TargetAccountId *uint32 `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	TipAmount       *uint32 `protobuf:"varint,3,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
}

func (x *CMsgMatchTips_SingleTip) Reset() {
	*x = CMsgMatchTips_SingleTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_m_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchTips_SingleTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchTips_SingleTip) ProtoMessage() {}

func (x *CMsgMatchTips_SingleTip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_m_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchTips_SingleTip.ProtoReflect.Descriptor instead.
func (*CMsgMatchTips_SingleTip) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_m_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgMatchTips_SingleTip) GetSourceAccountId() uint32 {
	if x != nil && x.SourceAccountId != nil {
		return *x.SourceAccountId
	}
	return 0
}

func (x *CMsgMatchTips_SingleTip) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgMatchTips_SingleTip) GetTipAmount() uint32 {
	if x != nil && x.TipAmount != nil {
		return *x.TipAmount
	}
	return 0
}

var File_dota_gcmessages_common_m_proto protoreflect.FileDescriptor

var file_dota_gcmessages_common_m_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x22, 0x4a, 0x0a, 0x1a, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x1d, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x19, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x15,
	0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0xe4, 0x26, 0x0a, 0x0d,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a,
	0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x75, 0x79, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x47, 0x75, 0x79, 0x73, 0x57, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x67, 0x61, 0x6d,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x12, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x69, 0x63,
	0x6b, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x72, 0x6f,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x63,
	0x6b, 0x73, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x10, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x69, 0x72, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x6f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12,
	0x4d, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x6f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x99, 0x13, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x30, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x35, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x36, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x37, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x37, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x38, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x38, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x6f, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f,
	0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67,
	0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x58, 0x50, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x58,
	0x50, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6f, 0x6c,
	0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x72,
	0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x48, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x46, 0x61,
	0x72, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x6f, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x0f, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x62, 0x0a,
	0x1a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x30, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e,
	0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x54, 0x0a, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72,
	0x6f, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x65, 0x64, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x57, 0x61, 0x73, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x77,
	0x61, 0x73, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x68, 0x65, 0x72, 0x6f, 0x57, 0x61, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x1a, 0x45, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x1a, 0x44, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd1, 0x01, 0x0a, 0x12, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x51, 0x0a,
	0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x45,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70,
	0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x52, 0x04, 0x74, 0x69, 0x70,
	0x73, 0x1a, 0x82, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x70,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x9a, 0x05, 0x0a, 0x0d, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x52, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x57, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x43, 0x4d, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x58, 0x4d, 0x41,
	0x53, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4d, 0x4f, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x50, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x31, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x48, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x44, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x44, 0x10, 0x11,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x12, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x52, 0x44, 0x4d,
	0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x31, 0x56, 0x31, 0x4d, 0x49, 0x44, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f,
	0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x41, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x19, 0x2a, 0xed, 0x07, 0x0a, 0x06, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x54, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x53, 0x54,
	0x49, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x49, 0x56, 0x55, 0x53, 0x5f, 0x32, 0x30, 0x31,
	0x33, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x32, 0x30, 0x31, 0x34, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x58, 0x4f, 0x4e, 0x5f, 0x50, 0x43, 0x5f, 0x42, 0x41, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x57, 0x52, 0x44, 0x5f, 0x44,
	0x41, 0x43, 0x5f, 0x32, 0x30, 0x31, 0x35, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x5f,
	0x32, 0x30, 0x31, 0x35, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x32, 0x30, 0x31, 0x35, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x5f, 0x32,
	0x30, 0x31, 0x35, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x10, 0x0a, 0x12, 0x24, 0x0a,
	0x20, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c,
	0x4f, 0x4f, 0x4d, 0x5f, 0x32, 0x30, 0x31, 0x35, 0x5f, 0x50, 0x52, 0x45, 0x42, 0x45, 0x41, 0x53,
	0x54, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x52, 0x4f, 0x53, 0x54, 0x49, 0x56, 0x55, 0x53, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x4a, 0x4f, 0x52, 0x5f, 0x32, 0x30, 0x31, 0x36, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x31, 0x36, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41,
	0x4a, 0x4f, 0x52, 0x5f, 0x32, 0x30, 0x31, 0x36, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x4a, 0x4f, 0x52, 0x5f, 0x32, 0x30, 0x31, 0x37, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x4d,
	0x5f, 0x32, 0x30, 0x31, 0x37, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x32, 0x30, 0x31, 0x37, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x59,
	0x5f, 0x32, 0x30, 0x31, 0x37, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x49, 0x56, 0x55, 0x53, 0x5f, 0x32, 0x30,
	0x31, 0x37, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32,
	0x30, 0x31, 0x38, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x49, 0x56, 0x55, 0x53, 0x5f, 0x32, 0x30, 0x31, 0x38,
	0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x5f, 0x32, 0x30, 0x31, 0x39, 0x10, 0x18, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x31, 0x39, 0x10, 0x19,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x49, 0x56, 0x55, 0x53, 0x5f, 0x32, 0x30, 0x31, 0x39, 0x10,
	0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x5f, 0x32, 0x30, 0x32, 0x30, 0x10, 0x1c, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x32, 0x30, 0x10, 0x1d, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x46, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x54, 0x49, 0x44, 0x45, 0x5f, 0x32,
	0x30, 0x32, 0x30, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x30, 0x32, 0x31, 0x10, 0x20, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x21, 0x2a, 0xf1, 0x02, 0x0a, 0x0d, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x52, 0x61, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x40, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x10, 0x41, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x42, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x43, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x10, 0x45, 0x2a, 0xd1, 0x03, 0x0a, 0x12, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x44,
	0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x32, 0x30, 0x31, 0x39, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x6f, 0x6c, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x32, 0x30, 0x31, 0x39, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x31, 0x76, 0x31, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x55,
	0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x6f, 0x6c, 0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6f, 0x72, 0x65, 0x10, 0x08, 0x12,
	0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x4d, 0x52, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x09, 0x12, 0x2c, 0x0a,
	0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d,
	0x52, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x10, 0x0a, 0x2a, 0x73, 0x0a, 0x11, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x02,
	0x42, 0x0c, 0x48, 0x01, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_common_m_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_m_proto_rawDescData = file_dota_gcmessages_common_m_proto_rawDesc
)

func file_dota_gcmessages_common_m_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_m_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_m_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_common_m_proto_rawDescData)
	})
	return file_dota_gcmessages_common_m_proto_rawDescData
}

var file_dota_gcmessages_common_m_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_dota_gcmessages_common_m_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_dota_gcmessages_common_m_proto_goTypes = []interface{}{
	(DOTA_GameMode)(0),                          // 0: mango.DOTA_GameMode
	(EEvent)(0),                                 // 1: mango.EEvent
	(EMatchOutcome)(0),                          // 2: mango.EMatchOutcome
	(EDOTAPlayerMMRType)(0),                     // 3: mango.EDOTAPlayerMMRType
	(EDOTAMMRBoostType)(0),                      // 4: mango.EDOTAMMRBoostType
	(CMsgDOTAMatch_ReplayState)(0),              // 5: mango.CMsgDOTAMatch.ReplayState
	(*CMatchPlayerAbilityUpgrade)(nil),          // 6: mango.CMatchPlayerAbilityUpgrade
	(*CMatchAdditionalUnitInventory)(nil),       // 7: mango.CMatchAdditionalUnitInventory
	(*CMatchPlayerPermanentBuff)(nil),           // 8: mango.CMatchPlayerPermanentBuff
	(*CMatchHeroSelectEvent)(nil),               // 9: mango.CMatchHeroSelectEvent
	(*CMsgDOTAMatch)(nil),                       // 10: mango.CMsgDOTAMatch
	(*CMsgMatchTips)(nil),                       // 11: mango.CMsgMatchTips
	(*CMsgDOTAMatch_Player)(nil),                // 12: mango.CMsgDOTAMatch.Player
	(*CMsgDOTAMatch_BroadcasterInfo)(nil),       // 13: mango.CMsgDOTAMatch.BroadcasterInfo
	(*CMsgDOTAMatch_BroadcasterChannel)(nil),    // 14: mango.CMsgDOTAMatch.BroadcasterChannel
	(*CMsgDOTAMatch_CustomGameData)(nil),        // 15: mango.CMsgDOTAMatch.CustomGameData
	(*CMsgDOTAMatch_Player_CustomGameData)(nil), // 16: mango.CMsgDOTAMatch.Player.CustomGameData
	(*CMsgMatchTips_SingleTip)(nil),             // 17: mango.CMsgMatchTips.SingleTip
}
var file_dota_gcmessages_common_m_proto_depIdxs = []int32{
	12, // 0: mango.CMsgDOTAMatch.players:type_name -> mango.CMsgDOTAMatch.Player
	0,  // 1: mango.CMsgDOTAMatch.game_mode:type_name -> mango.DOTA_GameMode
	9,  // 2: mango.CMsgDOTAMatch.picks_bans:type_name -> mango.CMatchHeroSelectEvent
	5,  // 3: mango.CMsgDOTAMatch.replay_state:type_name -> mango.CMsgDOTAMatch.ReplayState
	14, // 4: mango.CMsgDOTAMatch.broadcaster_channels:type_name -> mango.CMsgDOTAMatch.BroadcasterChannel
	15, // 5: mango.CMsgDOTAMatch.custom_game_data:type_name -> mango.CMsgDOTAMatch.CustomGameData
	2,  // 6: mango.CMsgDOTAMatch.match_outcome:type_name -> mango.EMatchOutcome
	1,  // 7: mango.CMsgMatchTips.event_id:type_name -> mango.EEvent
	17, // 8: mango.CMsgMatchTips.tips:type_name -> mango.CMsgMatchTips.SingleTip
	6,  // 9: mango.CMsgDOTAMatch.Player.ability_upgrades:type_name -> mango.CMatchPlayerAbilityUpgrade
	7,  // 10: mango.CMsgDOTAMatch.Player.additional_units_inventory:type_name -> mango.CMatchAdditionalUnitInventory
	8,  // 11: mango.CMsgDOTAMatch.Player.permanent_buffs:type_name -> mango.CMatchPlayerPermanentBuff
	16, // 12: mango.CMsgDOTAMatch.Player.custom_game_data:type_name -> mango.CMsgDOTAMatch.Player.CustomGameData
	13, // 13: mango.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos:type_name -> mango.CMsgDOTAMatch.BroadcasterInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_m_proto_init() }
func file_dota_gcmessages_common_m_proto_init() {
	if File_dota_gcmessages_common_m_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_common_m_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchPlayerAbilityUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchAdditionalUnitInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchPlayerPermanentBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchHeroSelectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_BroadcasterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_BroadcasterChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_CustomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_Player_CustomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_m_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchTips_SingleTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_common_m_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_m_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_m_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_m_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_m_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_m_proto = out.File
	file_dota_gcmessages_common_m_proto_rawDesc = nil
	file_dota_gcmessages_common_m_proto_goTypes = nil
	file_dota_gcmessages_common_m_proto_depIdxs = nil
}
